{"status": "skipped", "description": " Checking if the position of objects changed during pick action i.e. Lucy collided with an obstacle.\n        ", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "pick_test"}, {"name": "subSuite", "value": "TestPickAction"}, {"name": "host", "value": "Hyper-Dock"}, {"name": "thread", "value": "7854-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "tests.pick_test"}], "stop": 1607411935014, "uuid": "0b2e9cb1-0852-4e75-b558-9ad43efb3a92", "historyId": "dc4813afb6aed54594b859c91a8591d3", "name": "test_allmodels_positon_are_same", "start": 1607411934969, "fullName": "tests.pick_test.TestPickAction#test_allmodels_positon_are_same", "statusDetails": {"message": "ValueError: Can only compare identically-labeled Series objects", "trace": "self = <tests.pick_test.TestPickAction instance at 0x7fe8a6045200>\n\n    @pytest.mark.xfail(reason=\"One of the objects position should have changed\")\n    def test_allmodels_positon_are_same(self):\n        \"\"\" Checking if the position of objects changed during pick action i.e. Lucy collided with an obstacle.\n        \"\"\"\n>       lower_tolerance_difference, upper_tolerance_difference = log_reader_comparator('X-pos', 'pick_action_start', 'pick_action_end')\n\ntests/pick_test.py:101: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlogger/data_logger.py:141: in log_reader_comparator\n    newp['8'] = np.where(nswp[loc]-0.5<=newp[loc], 1, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Models\nground_plane      -0.500\nlab               -0.500\ntable743          -0....7\nminicoffeetable    0.300\nglass              0.250\nName: X-pos, dtype: float64\nother = Models\nground_plane       0.000\nlab123             0.000\ntable425          -0....2\nminicoffeetable    0.705\nglass              0.677\nName: X-pos, dtype: float64\naxis = None\n\n    def wrapper(self, other, axis=None):\n        # Validate the axis parameter\n        if axis is not None:\n            self._get_axis_number(axis)\n    \n        res_name = get_op_result_name(self, other)\n    \n        if isinstance(other, list):\n            # TODO: same for tuples?\n            other = np.asarray(other)\n    \n        if isinstance(other, ABCDataFrame):  # pragma: no cover\n            # Defer to DataFrame implementation; fail early\n            return NotImplemented\n    \n        elif isinstance(other, ABCSeries) and not self._indexed_same(other):\n>           raise ValueError(\"Can only compare identically-labeled \"\n                             \"Series objects\")\nE           ValueError: Can only compare identically-labeled Series objects\n\n/usr/local/lib/python2.7/dist-packages/pandas/core/ops.py:1676: ValueError"}, "attachments": [{"source": "5825e8a6-5cf9-4026-a4b7-5f8ec9f86d31-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "994dd338-1b2b-4719-8c5a-ca21c6d8518d-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "5d7a8a82-be43-4e24-9057-eac0846e185d-attachment.txt", "type": "text/plain", "name": "stderr"}]}