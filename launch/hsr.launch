<?xml version="1.0"?>
<launch>
  <arg name="namespace" default="hsrb"/>
  <arg name="debug" default="false"/>
  <arg name="gui" default="true" />
  <arg name="rviz" default="false"/>
  <arg name="gazebo_visualization" default="false" />
  <arg name="use_manipulation" default="true" />
  <arg name="use_navigation" default="true" />
  <arg name="use_perception" default="true" />
  <arg name="use_task" default="true" />
  <arg name="use_teleop" default="false" />
  <arg name="use_web" default="false" />
  <arg name="use_laser_odom" default="false" />
  <arg name="paused" default="false" />
  <arg name="fast_physics" default="true" />
  <arg name="robot_name" default="$(optenv ROBOT_NAME hsrb)" />

  <arg unless="$(arg fast_physics)" name="world_suffix" value=""/>
  <arg     if="$(arg fast_physics)" name="world_suffix" value="_fast"/>
  <!-- Change World name and Map -->
  <include file="$(find hsrb_gazebo_launch)/launch/include/hsrb_gazebo_common.xml" pass_all_args="true" >
    <arg name="map" default="$(find atg)/Environment/maps/my_map.yaml" />
    <arg name="world_name" value="$(find atg)/Environment/worlds/my_world.world"/>
    <!-- <arg name="robot_pos" value="-x 0 -y 0 -z 0.0254 -Y 1.567" /> -->
    <arg name="robot_pos" value="-x 0 -y 0 -z 0.05 -Y 0" />
  </include>
  <!-- rosrun mdr_pickup_action pickup_action_client_test -->
  <!-- python3.6 -m pytest src/action_test.py -v -s -->
  <!-- Rviz with custom config -->
  <!-- <node name='rviz' pkg='rviz' type='rviz' args='-d $(find atg)/Environment/rviz/hsr.rviz' /> -->

  <group ns="laser_2d_localizer">
    <param name="init_x" value="0.0"/>
    <param name="init_y" value="0.0"/>
    <param name="init_theta_deg" value="0.0"/>
  </group>
</launch>

<!-- If you use only a controller and sensors, the following merits and demerits exist.

merit: You can move it at speed in real-time.
You can incorporate functions such as oneâ€™s own recognition, autonomous movement, and manipulation.

demerit: You cannot use prepared functions such as recognition, autonomous movement, and manipulation,
 navigation (e.g., HMI), and the Python interface, etc. -->